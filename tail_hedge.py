# -*- coding: utf-8 -*-
"""Tail Hedge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mIUT8xmsM0XHAsFlEsLktcPpuip-2j7t
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import datetime as datetime
import scipy.stats as si
import sympy as sy
from sympy.stats import Normal, cdf
from datetime import timedelta

vix = pd.DataFrame(pd.read_csv('^VIX.csv',index_col='Date')['Adj Close'])
vix.columns = ['vix price']
sp500 = pd.DataFrame(pd.read_csv('^GSPC.csv',index_col='Date')['Adj Close'])
sp500.columns = ['sp500 price']
rf = pd.DataFrame(pd.read_csv('^IRX.csv',index_col='Date')['Adj Close'])/100 # annualization
rf.columns = ['rf']
df = sp500.join(vix).dropna()
df = df.join(rf)
df.index = pd.to_datetime(df.index)
# normalized_df=(df-df.mean())/df.std()

# normalized_df.iloc[6000:,:].plot()

# data explore
df.info()
df.describe()

# BS formula
def euro_vanilla(S, K, T, r, sigma, option = 'call'):
    
    #S: spot price
    #K: strike price
    #T: time to maturity
    #r: interest rate
    #sigma: volatility of underlying asset
    
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = (np.log(S / K) + (r - 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    
    if option == 'call':
        result = (S * si.norm.cdf(d1, 0.0, 1.0) - K * np.exp(-r * T) * si.norm.cdf(d2, 0.0, 1.0))
    if option == 'put':
        result = (K * np.exp(-r * T) * si.norm.cdf(-d2, 0.0, 1.0) - S * si.norm.cdf(-d1, 0.0, 1.0))
        
    return result

# price the options
# roll one month price to calculate sigma and annualize it
vix_rolling_sigma = df['vix price'].apply(lambda x:np.log(x)).rolling(20).std().dropna()*np.sqrt(252)
vix_rolling_sigma = pd.DataFrame(vix_rolling_sigma)
vix_rolling_sigma.columns = ['vix sigma']
df = df.join(pd.DataFrame(vix_rolling_sigma)).dropna()

euro_vanilla(df['vix price'][0], 25, 0.25, df['rf'][0], df['vix sigma'][0], option = 'call')

# option price
vix_25_strike_call=[]
for i in range(df.shape[0]):
  vix_25_strike_call.append(euro_vanilla(df['vix price'][i], 30, 0.25, df['rf'][i], df['vix sigma'][i], option = 'call'))
df['vix 25 strike call'] = vix_25_strike_call

vix_50_strike_call=[]
for i in range(df.shape[0]):
  vix_50_strike_call.append(euro_vanilla(df['vix price'][i], 50, 1/12, df['rf'][i], df['vix sigma'][i], option = 'call'))
df['vix 50 strike call'] = vix_50_strike_call

# for simplicity, just assume that the share can be decimals 
def get_portfolio_value(df,initial_money=1000000): # default initial money is 1000000
  portfolio = []
  benchmark = []
  sp_share = 0.99*initial_money/df['sp500 price'][0]
  hedge_money = 0.01*initial_money
  cash = hedge_money
  normal_hedge=0.5*hedge_money
  try:
    add_date =  df.loc[df['vix price']>50].index[0] # date to add more options
    expire_date = add_date+timedelta(days=30) # date of the option expiration
  except:
    add_date=[]
    expire_date=[]
  normal_hedge_share = 0
  crisis_hedge_share = 0
  for i in range(df.shape[0]):
    # print(i)
    t = df.index[i]
    benchmark.append(initial_money/df['sp500 price'][0]*df['sp500 price'][i])
    # print(t)
    # print(cash)
    # print(normal_hedge_share)
    # print(df['vix 25 strike call'][i])
    # if (t==df.index[0])|(t==df.index[0]+timedelta(days=365//2)):
    if np.mod(i,(365//2))==0:
      cash = cash+normal_hedge_share*max((df['vix price'][i]-25),0)
      normal_hedge = 0.5*cash
      cash = cash-normal_hedge
      normal_hedge_share = normal_hedge/(df['vix 25 strike call'][i])
      portfolio.append(sp_share*df['sp500 price'][i]+normal_hedge_share*max((df['vix price'][i]-25),0)+max(crisis_hedge_share*(df['vix price'][i]-50),0)+cash)
      # print(sp_share*df['sp500 price'][i]+normal_hedge_share*(df['sp500 price'][i]-25)+crisis_hedge_share*(df['sp500 price'][i]-50)+cash)
      # print(normal_hedge_share*max((df['vix price'][i]-25),0))
      # print('normal')
    elif t==add_date:
      # print(cash)
      crisis_hedge_share = cash/df['vix 50 strike call'][i]
      cash = 0
      portfolio.append(sp_share*df['sp500 price'][i]+normal_hedge_share*max((df['vix price'][i]-25),0)+max(crisis_hedge_share*(df['vix price'][i]-50),0)+cash)
      # print(normal_hedge_share*max((df['vix price'][i]-25),0))
      # print(sp_share*df['sp500 price'][i]+normal_hedge_share*max((df['vix price'][i]-25),0)+max(crisis_hedge_share*(df['vix price'][i]-50),0)+cash)
      # print( crisis_hedge_share)
      # print(crisis_hedge_share*max((df['vix price'][i]-50),0))
      # print(df['vix price'][i])
      # print(t)
      # print('crisis buy')
    elif t==expire_date:
      cash = cash+max(crisis_hedge_share*(df['vix price'][i]-50),0)
      # print(max(crisis_hedge_share*(df['vix price'][i]-50),0))
      crisis_hedge_share = 0
      portfolio.append(sp_share*df['sp500 price'][i]+normal_hedge_share*max((df['vix price'][i]-25),0)+max(crisis_hedge_share*(df['vix price'][i]-50),0)+cash)
      # print(normal_hedge_share*max((df['vix price'][i]-25),0))
      # print( crisis_hedge_share)
      # print(sp_share*df['sp500 price'][i]+normal_hedge_share*max((df['vix price'][i]-25),0)+max(crisis_hedge_share*(df['vix price'][i]-50),0)+cash)
      # print(crisis_hedge_share*max((df['vix price'][i]-50),0))
      # print(df['vix price'][i])
      # print(t)
      # print('crisis sell')
      try:
        add_date =  df.loc[(df['vix price']>50)&(df.index>expire_date)].index[0] # date to add more options
        expire_date = add_date+timedelta(days=30) # date of the option expiration
      except:
        add_date=[]
        expire_date=[]
    else:
      portfolio.append(sp_share*df['sp500 price'][i]+normal_hedge_share*max((df['vix price'][i]-25),0)+max(crisis_hedge_share*(df['vix price'][i]-50),0)+cash)
      # print(sp_share*df['sp500 price'][i]+normal_hedge_share*max((df['vix price'][i]-25),0)+max(crisis_hedge_share*(df['vix price'][i]-50),0)+cash)
      # print(normal_hedge_share*max((df['vix price'][i]-25),0))
      # print("premium: {}".format(max((df['vix price'][i]-25),0)))
      # print(t)
      # print('no action')
    
    # print("sp500: {}".format(sp_share*df['sp500 price'][i]+hedge_money))
  portfolio=pd.DataFrame(portfolio)
  portfolio.index=df.index
  portfolio.columns=['Portfolio Value']
  benchmark = pd.DataFrame(benchmark)
  benchmark.index=df.index
  benchmark.columns=['Portfolio Value']
  return portfolio,benchmark

# test on 2020 Q1
df_test1= df.loc[df.index>='2020-01-01']
test_portfolio1,benchmark1 = get_portfolio_value(df_test1,initial_money=1000000)
fig = plt.figure(figsize = (12,8))
ax = fig.add_subplot(111,ylabel = 'Portfolio Value')
test_portfolio1['Portfolio Value'].plot(ax=ax,label = 'Tail hedge')
benchmark1['Portfolio Value'].plot(ax=ax,label = 'SP500')
ax.legend()
ax.set_title('Tail Hedge Back Test in 2020 Q1')

# states
def maxDrawdown(cumReturn):
  Roll_Max = cumReturn.cummax()
  Daily_Drawdown = cumReturn-Roll_Max
  Max_Daily_Drawdown = Daily_Drawdown.cummin()
  return Max_Daily_Drawdown.min()
test_portfolio1=test_portfolio1['Portfolio Value']
benchmark1=benchmark1['Portfolio Value']
# stats of tail hedge portfolio
test_portfolio1_return=test_portfolio1.apply(lambda x:np.log(x)).diff().dropna() # return
test_portfolio1_cumReturn = test_portfolio1_return.cumsum().apply(lambda x:np.exp(x)).dropna()-1 # cumulative return
test_portfolio1_annual=(test_portfolio1_cumReturn[-1]+1)**(252/len(test_portfolio1_cumReturn))-1 # annualized return
test_portfolio1_vol = np.std(test_portfolio1_return) # volatility
test_portfolio1_sharpe=np.mean(test_portfolio1_annual-np.mean((df_test1['rf'])))/(test_portfolio1_vol*np.sqrt(252)) # sharpe ratio
test_portfolio1_return_skew = test_portfolio1_return.skew(axis = 0, skipna = True) # skewness
test_portfolio1_maxDrawdown = maxDrawdown(test_portfolio1_cumReturn) # maximum drawdown

# stats of benchmark strategy 
benchmark1_return=benchmark1.apply(lambda x:np.log(x)).diff().dropna() # return
benchmark1_cumReturn = benchmark1_return.cumsum().apply(lambda x:np.exp(x)).dropna()-1 # cumulative return
benchmark1_annual=(benchmark1_cumReturn[-1]+1)**(252/len(benchmark1_cumReturn))-1 # annualized return
benchmark1_vol = np.std(benchmark1_return) # volatility
benchmark1_sharpe=np.mean(benchmark1_annual-np.mean((df_test1['rf'])))/(benchmark1_vol*np.sqrt(252)) # sharpe ratio
benchmark1_return_skew = benchmark1_return.skew(axis = 0, skipna = True) # skewness
benchmark1_maxDrawdown = maxDrawdown(benchmark1_cumReturn) # maximum drawdown

print('Tail hedge portfolio metrics')
print('---------------------------------------------------')
print('Annualized Return :{}'.format(round(test_portfolio1_annual,3)))
print('Cumulative Return :{}'.format(round(test_portfolio1_cumReturn[-1],2)))
print('Volatility :{}'.format(round(test_portfolio1_vol,3)))
print('Sharpe Ratio :{}'.format(round(test_portfolio1_sharpe,2)))
print('Skewness :{}'.format(round(test_portfolio1_return_skew,2)))
print('Maximum Drawdown :{}'.format(round(test_portfolio1_maxDrawdown,2)))
print('---------------------------------------------------')
print('Benchmark portfolio metrics')
print('---------------------------------------------------')
print('Annualized Return :{}'.format(round(benchmark1_annual,3)))
print('Cumulative Return :{}'.format(round(benchmark1_cumReturn[-1],2)))
print('Volatility :{}'.format(round(benchmark1_vol,3)))
print('Sharpe Ratio :{}'.format(round(benchmark1_sharpe,2)))
print('Skewness :{}'.format(round(benchmark1_return_skew,2)))
print('Maximum Drawdown :{}'.format(round(benchmark1_maxDrawdown,2)))

# test on bull market
df_test2= df.loc[(df.index>='2017-01-01')&(df.index<'2018-01-01')]
test_portfolio2,benchmark2 = get_portfolio_value(df_test2,initial_money=1000000)
fig = plt.figure(figsize = (12,8))
ax = fig.add_subplot(111,ylabel = 'Portfolio Value')
test_portfolio2['Portfolio Value'].plot(ax=ax,label = 'Tail hedge')
benchmark2['Portfolio Value'].plot(ax=ax,label = 'SP500')
ax.legend()
ax.set_title('Tail Hedge Back Test in bull market')

# test in 2008
df_test3= df.loc[(df.index>='2008-06-01')&(df.index<'2009-01-01')]
test_portfolio3,benchmark3 = get_portfolio_value(df_test3,initial_money=1000000)
fig = plt.figure(figsize = (12,8))
ax = fig.add_subplot(111,ylabel = 'Portfolio Value')
test_portfolio3['Portfolio Value'].plot(ax=ax,label = 'Tail hedge')
benchmark3['Portfolio Value'].plot(ax=ax,label = 'SP500')
ax.legend()
ax.set_title('Tail Hedge Back Test in 2008')

# long-term test (2000-2020)
df_test4= df.loc[(df.index>='2008-06-01')&(df.index<'2020-05-01')]
test_portfolio4,benchmark4 = get_portfolio_value(df_test4,initial_money=1000000)
fig = plt.figure(figsize = (12,8))
ax = fig.add_subplot(111,ylabel = 'Portfolio Value')
test_portfolio4['Portfolio Value'].plot(ax=ax,label = 'Tail hedge')
benchmark4['Portfolio Value'].plot(ax=ax,label = 'SP500')
ax.legend()
ax.set_title('Long term Tail Hedge Back Test')

(benchmark4_return-(df_test1['rf']/np.sqrt(252))).describe()
np.mean(benchmark4_return)*np.sqrt(252)
benchmark4_return.cumsum().apply(lambda x:np.exp(x))

test_portfolio4=test_portfolio4['Portfolio Value']
benchmark4=benchmark4['Portfolio Value']

# stats of tail hedge portfolio
test_portfolio4_return=test_portfolio4.apply(lambda x:np.log(x)).diff().apply(lambda x:np.exp(x)).dropna()-1 # return
test_portfolio4_cumReturn = test_portfolio4_return.cumsum().apply(lambda x:np.exp(x)).dropna()-1 # cumulative return
test_portfolio4_annual=(test_portfolio4_cumReturn[-1]+1)**(252/len(test_portfolio4_cumReturn))-1 # annualized return
test_portfolio4_vol = np.std(test_portfolio4_return) # volatility
test_portfolio4_sharpe = np.mean(test_portfolio4_annual-np.mean((df_test4['rf'])))/(test_portfolio4_vol*np.sqrt(252)) # sharpe ratio
test_portfolio4_return_skew = test_portfolio4_return.skew(axis = 0, skipna = True) # skewness
test_portfolio4_maxDrawdown = maxDrawdown(test_portfolio4_cumReturn) # maximum drawdown

# stats of benchmark strategy 
benchmark4_return=benchmark4.apply(lambda x:np.log(x)).diff().apply(lambda x:np.exp(x)).dropna()-1 # return
benchmark4_cumReturn = benchmark4_return.cumsum().apply(lambda x:np.exp(x)).dropna()-1 # cumulative return
benchmark4_annual=(benchmark4_cumReturn[-1]+1)**(252/len(benchmark4_cumReturn))-1 # annualized return
benchmark4_vol = np.std(benchmark4_return) # volatility
benchmark4_sharpe=np.mean(benchmark4_annual-np.mean((df_test4['rf'])))/(benchmark4_vol*np.sqrt(252)) # sharpe ratio
benchmark4_return_skew = benchmark4_return.skew(axis = 0, skipna = True) # skewness
benchmark4_maxDrawdown = maxDrawdown(benchmark4_cumReturn) # maximum drawdown

print('Tail hedge portfolio metrics')
print('---------------------------------------------------')
print('Annualized Return :{}'.format(round(test_portfolio4_annual,3)))
print('Cumulative Return :{}'.format(round(test_portfolio4_cumReturn[-1],2)))
print('Volatility :{}'.format(round(test_portfolio4_vol,3)))
print('Sharpe Ratio :{}'.format(round(test_portfolio4_sharpe,2)))
print('Skewness :{}'.format(round(test_portfolio4_return_skew,2)))
print('Maximum Drawdown :{}'.format(round(test_portfolio4_maxDrawdown,2)))
print('---------------------------------------------------')
print('Benchmark portfolio metrics')
print('---------------------------------------------------')
print('Annualized Return :{}'.format(round(benchmark4_annual,3)))
print('Cumulative Return :{}'.format(round(benchmark4_cumReturn[-1],2)))
print('Volatility :{}'.format(round(benchmark4_vol,3)))
print('Sharpe Ratio :{}'.format(round(benchmark4_sharpe,2)))
print('Skewness :{}'.format(round(benchmark4_return_skew,2)))
print('Maximum Drawdown :{}'.format(round(benchmark4_maxDrawdown,2)))

